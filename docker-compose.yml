services:
  server:
    container_name: server
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    volumes:
      - .:/usr/src/app
    env_file:
    - .env
    command: npm run start:dev
    ports:
      - "3001:3001"
    networks:
      - backend
    depends_on:
      - redis
      - postgres-server

  redis:
    container_name: redis
    hostname: redis
    image: redis:latest
    ports:
     - "6379:6379"
     - "8001:8001"
    restart: always
    volumes: 
      - cache:/data
    networks:
      - backend
    #command: ["redis-server", "--bind", "redis", "--port", "6379"]

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    networks:
      - backend
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8088:8081"
    depends_on:
      - redis

  postgres-server:
    container_name: postgres-server
    hostname: postgresql
    image: postgres:latest
    volumes:
      - 'postgres-server-master_data:/var/lib/postgresql/data'
    environment:
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD:-postgres}
      - POSTGRES_USER=${DATABASE_USER:-postgres}
      - POSTGRES_DB=${DATABASE_DEFAULT:-postgres}
    networks:
      - backend
    ports:
      - 5432:5432
    restart: always

  pgadmin:
    container_name: postgres-pgadmin
    hostname: postgres-pgadmin
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
    networks:
      - backend
    volumes:
      - ./pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: on-failure
    depends_on:
      - postgres-server

networks:
  backend:
    name: ${DATABASE_NETWORK:-postgres-server}

volumes:
  postgres-server-master_data:
    driver: local
    name: postgres-server-master_data
  pgadmin_data:
    driver: local
    name: pgadmin_data
  cache:
    driver: local